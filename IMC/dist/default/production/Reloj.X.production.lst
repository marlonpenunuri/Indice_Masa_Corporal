

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Mar 06 18:18:09 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.42
    23                           ; Generated 13/04/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _TMR0	set	4054
    57  0000                     _ADCON0bits	set	4034
    58  0000                     _INTCONbits	set	4082
    59  0000                     _T0CON	set	4053
    60  0000                     _RCREG	set	4014
    61  0000                     _PIR1bits	set	3998
    62  0000                     _TXREG	set	4013
    63  0000                     _TXSTAbits	set	4012
    64  0000                     _TRISCbits	set	3988
    65  0000                     _BAUDCON	set	4024
    66  0000                     _SPBRG	set	4015
    67  0000                     _SPBRGH	set	4016
    68  0000                     _RCSTA	set	4011
    69  0000                     _TXSTA	set	4012
    70                           
    71                           	psect	smallconst
    72  0000'                    __psmallconst:
    73                           	opt stack 0
    74  0000' 00                 	db	0
    75  0001'                    STR_3:
    76  0001' 0A                 	db	10
    77  0002' 49                 	db	73	;'I'
    78  0003' 6E                 	db	110	;'n'
    79  0004' 67                 	db	103	;'g'
    80  0005' 72                 	db	114	;'r'
    81  0006' 65                 	db	101	;'e'
    82  0007' 73                 	db	115	;'s'
    83  0008' 65                 	db	101	;'e'
    84  0009' 20                 	db	32
    85  000A' 73                 	db	115	;'s'
    86  000B' 75                 	db	117	;'u'
    87  000C' 20                 	db	32
    88  000D' 61                 	db	97	;'a'
    89  000E' 6C                 	db	108	;'l'
    90  000F' 74                 	db	116	;'t'
    91  0010' 75                 	db	117	;'u'
    92  0011' 72                 	db	114	;'r'
    93  0012' 61                 	db	97	;'a'
    94  0013' 20                 	db	32
    95  0014' 69                 	db	105	;'i'
    96  0015' 6E                 	db	110	;'n'
    97  0016' 63                 	db	99	;'c'
    98  0017' 6C                 	db	108	;'l'
    99  0018' 75                 	db	117	;'u'
   100  0019' 79                 	db	121	;'y'
   101  001A' 65                 	db	101	;'e'
   102  001B' 6E                 	db	110	;'n'
   103  001C' 64                 	db	100	;'d'
   104  001D' 6F                 	db	111	;'o'
   105  001E' 20                 	db	32
   106  001F' 64                 	db	100	;'d'
   107  0020' 6F                 	db	111	;'o'
   108  0021' 73                 	db	115	;'s'
   109  0022' 20                 	db	32
   110  0023' 70                 	db	112	;'p'
   111  0024' 6F                 	db	111	;'o'
   112  0025' 73                 	db	115	;'s'
   113  0026' 69                 	db	105	;'i'
   114  0027' 63                 	db	99	;'c'
   115  0028' 69                 	db	105	;'i'
   116  0029' 6F                 	db	111	;'o'
   117  002A' 6E                 	db	110	;'n'
   118  002B' 65                 	db	101	;'e'
   119  002C' 73                 	db	115	;'s'
   120  002D' 20                 	db	32
   121  002E' 74                 	db	116	;'t'
   122  002F' 72                 	db	114	;'r'
   123  0030' 61                 	db	97	;'a'
   124  0031' 73                 	db	115	;'s'
   125  0032' 20                 	db	32
   126  0033' 65                 	db	101	;'e'
   127  0034' 6C                 	db	108	;'l'
   128  0035' 20                 	db	32
   129  0036' 70                 	db	112	;'p'
   130  0037' 75                 	db	117	;'u'
   131  0038' 6E                 	db	110	;'n'
   132  0039' 74                 	db	116	;'t'
   133  003A' 6F                 	db	111	;'o'
   134  003B' 3A                 	db	58	;':'
   135  003C' 20                 	db	32
   136  003D' 0A                 	db	10
   137  003E' 0D                 	db	13
   138  003F' 00                 	db	0
   139  0040'                    STR_2:
   140  0040' 0A                 	db	10
   141  0041' 49                 	db	73	;'I'
   142  0042' 6E                 	db	110	;'n'
   143  0043' 67                 	db	103	;'g'
   144  0044' 72                 	db	114	;'r'
   145  0045' 65                 	db	101	;'e'
   146  0046' 73                 	db	115	;'s'
   147  0047' 65                 	db	101	;'e'
   148  0048' 20                 	db	32
   149  0049' 73                 	db	115	;'s'
   150  004A' 75                 	db	117	;'u'
   151  004B' 20                 	db	32
   152  004C' 70                 	db	112	;'p'
   153  004D' 65                 	db	101	;'e'
   154  004E' 73                 	db	115	;'s'
   155  004F' 6F                 	db	111	;'o'
   156  0050' 20                 	db	32
   157  0051' 69                 	db	105	;'i'
   158  0052' 6E                 	db	110	;'n'
   159  0053' 63                 	db	99	;'c'
   160  0054' 6C                 	db	108	;'l'
   161  0055' 75                 	db	117	;'u'
   162  0056' 79                 	db	121	;'y'
   163  0057' 65                 	db	101	;'e'
   164  0058' 6E                 	db	110	;'n'
   165  0059' 64                 	db	100	;'d'
   166  005A' 6F                 	db	111	;'o'
   167  005B' 20                 	db	32
   168  005C' 75                 	db	117	;'u'
   169  005D' 6E                 	db	110	;'n'
   170  005E' 61                 	db	97	;'a'
   171  005F' 20                 	db	32
   172  0060' 70                 	db	112	;'p'
   173  0061' 6F                 	db	111	;'o'
   174  0062' 73                 	db	115	;'s'
   175  0063' 69                 	db	105	;'i'
   176  0064' 63                 	db	99	;'c'
   177  0065' 69                 	db	105	;'i'
   178  0066' 6F                 	db	111	;'o'
   179  0067' 6E                 	db	110	;'n'
   180  0068' 20                 	db	32
   181  0069' 74                 	db	116	;'t'
   182  006A' 72                 	db	114	;'r'
   183  006B' 61                 	db	97	;'a'
   184  006C' 73                 	db	115	;'s'
   185  006D' 20                 	db	32
   186  006E' 65                 	db	101	;'e'
   187  006F' 6C                 	db	108	;'l'
   188  0070' 20                 	db	32
   189  0071' 70                 	db	112	;'p'
   190  0072' 75                 	db	117	;'u'
   191  0073' 6E                 	db	110	;'n'
   192  0074' 74                 	db	116	;'t'
   193  0075' 6F                 	db	111	;'o'
   194  0076' 3A                 	db	58	;':'
   195  0077' 20                 	db	32
   196  0078' 0A                 	db	10
   197  0079' 0D                 	db	13
   198  007A' 00                 	db	0
   199  007B'                    STR_1:
   200  007B' 43                 	db	67	;'C'
   201  007C' 61                 	db	97	;'a'
   202  007D' 6C                 	db	108	;'l'
   203  007E' 63                 	db	99	;'c'
   204  007F' 75                 	db	117	;'u'
   205  0080' 6C                 	db	108	;'l'
   206  0081' 61                 	db	97	;'a'
   207  0082' 64                 	db	100	;'d'
   208  0083' 6F                 	db	111	;'o'
   209  0084' 72                 	db	114	;'r'
   210  0085' 61                 	db	97	;'a'
   211  0086' 20                 	db	32
   212  0087' 64                 	db	100	;'d'
   213  0088' 65                 	db	101	;'e'
   214  0089' 20                 	db	32
   215  008A' 49                 	db	73	;'I'
   216  008B' 4D                 	db	77	;'M'
   217  008C' 43                 	db	67	;'C'
   218  008D' 20                 	db	32
   219  008E' 0A                 	db	10
   220  008F' 0D                 	db	13
   221  0090' 00                 	db	0
   222  0091'                    STR_4:
   223  0091' 0A                 	db	10
   224  0092' 52                 	db	82	;'R'
   225  0093' 65                 	db	101	;'e'
   226  0094' 73                 	db	115	;'s'
   227  0095' 75                 	db	117	;'u'
   228  0096' 6C                 	db	108	;'l'
   229  0097' 74                 	db	116	;'t'
   230  0098' 61                 	db	97	;'a'
   231  0099' 64                 	db	100	;'d'
   232  009A' 6F                 	db	111	;'o'
   233  009B' 3A                 	db	58	;':'
   234  009C' 0A                 	db	10
   235  009D' 0D                 	db	13
   236  009E' 00                 	db	0
   237  009F'                    STR_5:
   238  009F' 0A                 	db	10
   239  00A0' 0A                 	db	10
   240  00A1' 00                 	db	0
   241                           
   242                           ; #config settings
   243  00A2' 00                 	db	0	; dummy byte at the end
   244  0000                     
   245                           	psect	cinit
   246  0000'                    __pcinit:
   247                           	opt stack 0
   248  0000'                    start_initialization:
   249                           	opt stack 0
   250  0000'                    __initialization:
   251                           	opt stack 0
   252  0000'                    end_of_initialization:
   253                           	opt stack 0
   254  0000'                    __end_of__initialization:
   255                           	opt stack 0
   256  0000' 0E00'              	movlw	low (__Lsmallconst shr (0+16))
   257  0002' 6EF8               	movwf	tblptru,c
   258  0004' 0E00'              	movlw	high __Lsmallconst
   259  0006' 6EF7               	movwf	tblptrh,c
   260  0008' 0100               	movlb	0
   261  000A' EF00' F000'        	goto	_main	;jump to C main() function
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           
   265                           	psect	cstackCOMRAM
   266  0000'                    __pcstackCOMRAM:
   267                           	opt stack 0
   268  0000'                    ??_bcd2hex:
   269  0000'                    ?_ASCII_UART:
   270                           	opt stack 0
   271  0000'                    ?___awmod:
   272                           	opt stack 0
   273  0000'                    ?___lwdiv:
   274                           	opt stack 0
   275  0000'                    putc_UART@dato_TX:
   276                           	opt stack 0
   277  0000'                    ___awmod@dividend:
   278                           	opt stack 0
   279  0000'                    ___lwdiv@dividend:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x0
   283  0000'                    	ds	1
   284  0001'                    bcd2hex@y:
   285                           	opt stack 0
   286  0001'                    printf_UART@dato:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x1
   290  0001'                    	ds	1
   291  0002'                    ___awmod@divisor:
   292                           	opt stack 0
   293  0002'                    ___lwdiv@divisor:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x2
   297  0002'                    	ds	1
   298  0003'                    ??_printf_UART:
   299                           
   300                           ; 1 bytes @ 0x3
   301  0003'                    	ds	1
   302  0004'                    ___awmod@counter:
   303                           	opt stack 0
   304  0004'                    ___lwdiv@quotient:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x4
   308  0004'                    	ds	1
   309  0005'                    printf_UART@i:
   310                           	opt stack 0
   311  0005'                    ___awmod@sign:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x5
   315  0005'                    	ds	1
   316  0006'                    ?___awdiv:
   317                           	opt stack 0
   318  0006'                    ___lwdiv@counter:
   319                           	opt stack 0
   320  0006'                    ___awdiv@dividend:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x6
   324  0006'                    	ds	2
   325  0008'                    ___awdiv@divisor:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x8
   329  0008'                    	ds	2
   330  000A'                    ___awdiv@counter:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0xA
   334  000A'                    	ds	1
   335  000B'                    ___awdiv@sign:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0xB
   339  000B'                    	ds	1
   340  000C'                    ___awdiv@quotient:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0xC
   344  000C'                    	ds	2
   345  000E'                    ?_hex2bcd:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0xE
   349  000E'                    	ds	2
   350  0010'                    _hex2bcd$906:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x10
   354  0010'                    	ds	2
   355  0012'                    hex2bcd@x:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x12
   359  0012'                    	ds	1
   360  0013'                    hex2bcd@y:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x13
   364  0013'                    	ds	2
   365  0015'                    ??_Op_IMC:
   366                           
   367                           ; 1 bytes @ 0x15
   368  0015'                    	ds	3
   369  0018'                    Op_IMC@sq_alt:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x18
   373  0018'                    	ds	2
   374  001A'                    Op_IMC@num:
   375                           	opt stack 0
   376                           
   377                           ; 8 bytes @ 0x1A
   378  001A'                    	ds	8
   379  0022'                    Op_IMC@sq_alt2:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x22
   383  0022'                    	ds	2
   384  0024'                    Op_IMC@dig1_pes_rec:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x24
   388  0024'                    	ds	2
   389  0026'                    Op_IMC@dec_alt_temp:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x26
   393  0026'                    	ds	2
   394  0028'                    Op_IMC@dig2:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x28
   398  0028'                    	ds	1
   399  0029'                    Op_IMC@dig1_pes:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x29
   403  0029'                    	ds	1
   404  002A'                    Op_IMC@dec_pes:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x2A
   408  002A'                    	ds	1
   409  002B'                    Op_IMC@dato:
   410                           	opt stack 0
   411                           
   412                           ; 6 bytes @ 0x2B
   413  002B'                    	ds	6
   414  0031'                    Op_IMC@dig2_alt:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x31
   418  0031'                    	ds	1
   419  0032'                    Op_IMC@dig1:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x32
   423  0032'                    	ds	1
   424  0033'                    Op_IMC@resultado:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x33
   428  0033'                    	ds	1
   429  0034'                    Op_IMC@dec_alt:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x34
   433  0034'                    	ds	1
   434  0035'                    Op_IMC@byte1:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x35
   438  0035'                    	ds	1
   439  0036'                    Op_IMC@i:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x36
   443  0036'                    	ds	1
   444  0037'                    tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           
   447                           ; 1 bytes @ 0x37
   448 ;;
   449 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   450 ;;
   451 ;; *************** function _main *****************
   452 ;; Defined at:
   453 ;;		line 83 in file "Main.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   467 ;;      Params:         0       0       0       0       0       0       0       0       0
   468 ;;      Locals:         0       0       0       0       0       0       0       0       0
   469 ;;      Temps:          0       0       0       0       0       0       0       0       0
   470 ;;      Totals:         0       0       0       0       0       0       0       0       0
   471 ;;Total ram usage:        0 bytes
   472 ;; Hardware stack levels required when called:    3
   473 ;; This function calls:
   474 ;;		_Op_IMC
   475 ;;		_config
   476 ;; This function is called by:
   477 ;;		Startup code after reset
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           	psect	text0
   482  0000'                    __ptext0:
   483                           	opt stack 0
   484  0000'                    _main:
   485                           	opt stack 28
   486                           
   487                           ;Main.c: 84: config();
   488                           
   489                           ;incstack = 0
   490  0000' EC00' F000'        	call	_config	;wreg free
   491  0004'                    l1126:
   492                           
   493                           ;Main.c: 87: Op_IMC();
   494  0004' EC00' F000'        	call	_Op_IMC	;wreg free
   495  0008' D7FD               	goto	l1126
   496  000A'                    __end_of_main:
   497                           	opt stack 0
   498                           tblptru	equ	0xFF8
   499                           tblptrh	equ	0xFF7
   500                           
   501 ;; *************** function _config *****************
   502 ;; Defined at:
   503 ;;		line 11 in file "UART.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, status,2
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   517 ;;      Params:         0       0       0       0       0       0       0       0       0
   518 ;;      Locals:         0       0       0       0       0       0       0       0       0
   519 ;;      Temps:          0       0       0       0       0       0       0       0       0
   520 ;;      Totals:         0       0       0       0       0       0       0       0       0
   521 ;;Total ram usage:        0 bytes
   522 ;; Hardware stack levels used:    1
   523 ;; This function calls:
   524 ;;		Nothing
   525 ;; This function is called by:
   526 ;;		_main
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           	psect	text1
   531  0000'                    __ptext1:
   532                           	opt stack 0
   533  0000'                    _config:
   534                           	opt stack 30
   535                           
   536                           ;UART.c: 12: TXSTA=0x26;
   537                           
   538                           ;incstack = 0
   539  0000' 0E26               	movlw	38
   540  0002' 6EAC               	movwf	4012,c	;volatile
   541                           
   542                           ;UART.c: 13: RCSTA=0x90;
   543  0004' 0E90               	movlw	144
   544  0006' 6EAB               	movwf	4011,c	;volatile
   545                           
   546                           ;UART.c: 14: SPBRGH=0;
   547  0008' 0E00               	movlw	0
   548  000A' 6EB0               	movwf	4016,c	;volatile
   549                           
   550                           ;UART.c: 15: SPBRG=103;
   551  000C' 0E67               	movlw	103
   552  000E' 6EAF               	movwf	4015,c	;volatile
   553                           
   554                           ;UART.c: 16: BAUDCON=0x48;
   555  0010' 0E48               	movlw	72
   556  0012' 6EB8               	movwf	4024,c	;volatile
   557                           
   558                           ;UART.c: 17: TRISCbits.RC6=1;
   559  0014' 8C94               	bsf	3988,6,c	;volatile
   560                           
   561                           ;UART.c: 18: TRISCbits.RC7 =1;
   562  0016' 8E94               	bsf	3988,7,c	;volatile
   563  0018' 0012               	return		;funcret
   564  001A'                    __end_of_config:
   565                           	opt stack 0
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           
   569 ;; *************** function _Op_IMC *****************
   570 ;; Defined at:
   571 ;;		line 8 in file "Main.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  i               1   54[COMRAM] unsigned char 
   576 ;;  num             8   26[COMRAM] unsigned char [8]
   577 ;;  dato            6   43[COMRAM] unsigned char [6]
   578 ;;  dec_alt_temp    2   38[COMRAM] unsigned int 
   579 ;;  dig1_pes_rec    2   36[COMRAM] unsigned int 
   580 ;;  sq_alt2         2   34[COMRAM] unsigned int 
   581 ;;  sq_alt          2   24[COMRAM] unsigned int 
   582 ;;  byte1           1   53[COMRAM] unsigned char 
   583 ;;  dec_alt         1   52[COMRAM] unsigned char 
   584 ;;  resultado       1   51[COMRAM] unsigned char 
   585 ;;  dig1            1   50[COMRAM] unsigned char 
   586 ;;  dig2_alt        1   49[COMRAM] unsigned char 
   587 ;;  dec_pes         1   42[COMRAM] unsigned char 
   588 ;;  dig1_pes        1   41[COMRAM] unsigned char 
   589 ;;  dig2            1   40[COMRAM] unsigned char 
   590 ;; Return value:  Size  Location     Type
   591 ;;                  1    wreg      void 
   592 ;; Registers used:
   593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
   594 ;; Tracked objects:
   595 ;;		On entry : 0/0
   596 ;;		On exit  : 0/0
   597 ;;		Unchanged: 0/0
   598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   599 ;;      Params:         0       0       0       0       0       0       0       0       0
   600 ;;      Locals:        31       0       0       0       0       0       0       0       0
   601 ;;      Temps:          3       0       0       0       0       0       0       0       0
   602 ;;      Totals:        34       0       0       0       0       0       0       0       0
   603 ;;Total ram usage:       34 bytes
   604 ;; Hardware stack levels used:    1
   605 ;; Hardware stack levels required when called:    2
   606 ;; This function calls:
   607 ;;		_ASCII_UART
   608 ;;		___lwdiv
   609 ;;		_bcd2hex
   610 ;;		_hex2bcd
   611 ;;		_printf_UART
   612 ;;		_putc_UART
   613 ;;		_scanf_UART
   614 ;; This function is called by:
   615 ;;		_main
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text2
   620  0000'                    __ptext2:
   621                           	opt stack 0
   622  0000'                    _Op_IMC:
   623                           	opt stack 28
   624                           
   625                           ;Main.c: 9: unsigned char dec_pes = 0;
   626                           
   627                           ;incstack = 0
   628  0000' 0E00               	movlw	0
   629  0002' 6E2A'              	movwf	Op_IMC@dec_pes,c
   630                           
   631                           ;Main.c: 10: unsigned int dec_alt_temp = 0;
   632  0004' 0E00               	movlw	0
   633  0006' 6E27'              	movwf	Op_IMC@dec_alt_temp+1,c
   634  0008' 0E00               	movlw	0
   635  000A' 6E26'              	movwf	Op_IMC@dec_alt_temp,c
   636                           
   637                           ;Main.c: 11: unsigned char dec_alt = 0;
   638  000C' 0E00               	movlw	0
   639  000E' 6E34'              	movwf	Op_IMC@dec_alt,c
   640                           
   641                           ;Main.c: 12: unsigned char dig1_pes = 0;
   642  0010' 0E00               	movlw	0
   643  0012' 6E29'              	movwf	Op_IMC@dig1_pes,c
   644                           
   645                           ;Main.c: 13: unsigned char dig2_alt = 0;
   646  0014' 0E00               	movlw	0
   647  0016' 6E31'              	movwf	Op_IMC@dig2_alt,c
   648                           
   649                           ;Main.c: 14: unsigned int sq_alt = 0;
   650  0018' 0E00               	movlw	0
   651  001A' 6E19'              	movwf	Op_IMC@sq_alt+1,c
   652  001C' 0E00               	movlw	0
   653  001E' 6E18'              	movwf	Op_IMC@sq_alt,c
   654                           
   655                           ;Main.c: 15: unsigned char dato[6];
   656                           ;Main.c: 16: unsigned char num[8];
   657                           ;Main.c: 17: unsigned char byte1;
   658                           ;Main.c: 18: unsigned char dig1;
   659                           ;Main.c: 19: unsigned char dig2;
   660                           ;Main.c: 20: unsigned char resultado;
   661                           ;Main.c: 22: printf_UART ("Calculadora de IMC \n\r");
   662  0020' 0E00'              	movlw	low STR_1
   663  0022' 6E01'              	movwf	printf_UART@dato,c
   664  0024' 0E00'              	movlw	high STR_1
   665  0026' 6E02'              	movwf	printf_UART@dato+1,c
   666  0028' EC00' F000'        	call	_printf_UART	;wreg free
   667                           
   668                           ;Main.c: 23: printf_UART ("\nIngrese su peso incluyendo una posicion tras el punto: \n\r
      +                          ");
   669  002C' 0E00'              	movlw	low STR_2
   670  002E' 6E01'              	movwf	printf_UART@dato,c
   671  0030' 0E00'              	movlw	high STR_2
   672  0032' 6E02'              	movwf	printf_UART@dato+1,c
   673  0034' EC00' F000'        	call	_printf_UART	;wreg free
   674                           
   675                           ;Main.c: 26: for(unsigned char i=0;i<8;i++){
   676  0038' 0E00               	movlw	0
   677  003A' 6E36'              	movwf	Op_IMC@i,c
   678  003C'                    l1060:
   679  003C' 0E07               	movlw	7
   680  003E' 6436'              	cpfsgt	Op_IMC@i,c
   681  0040' D001               	goto	l1064
   682  0042' D022               	goto	l1076
   683  0044'                    l1064:
   684                           
   685                           ;Main.c: 27: if (i==4){
   686  0044' 0E04               	movlw	4
   687  0046' 1836'              	xorwf	Op_IMC@i,w,c
   688  0048' A4D8               	btfss	status,2,c
   689  004A' D006               	goto	l1068
   690                           
   691                           ;Main.c: 28: printf_UART ("\nIngrese su altura incluyendo dos posiciones tras el punto: 
      +                          \n\r");
   692  004C' 0E00'              	movlw	low STR_3
   693  004E' 6E01'              	movwf	printf_UART@dato,c
   694  0050' 0E00'              	movlw	high STR_3
   695  0052' 6E02'              	movwf	printf_UART@dato+1,c
   696  0054' EC00' F000'        	call	_printf_UART	;wreg free
   697  0058'                    l1068:
   698                           
   699                           ;Main.c: 29: }
   700                           ;Main.c: 30: num[i] = scanf_UART();
   701  0058' 5036'              	movf	Op_IMC@i,w,c
   702  005A' 0D01               	mullw	1
   703  005C' 0E00'              	movlw	low Op_IMC@num
   704  005E' 24F3               	addwf	prodl,w,c
   705  0060' 6ED9               	movwf	fsr2l,c
   706  0062' 0E00'              	movlw	high Op_IMC@num
   707  0064' 20F4               	addwfc	prodh,w,c
   708  0066' 6EDA               	movwf	fsr2h,c
   709  0068' EC00' F000'        	call	_scanf_UART	;wreg free
   710  006C' 6EDF               	movwf	indf2,c
   711                           
   712                           ;Main.c: 31: putc_UART(num[i]);
   713  006E' 5036'              	movf	Op_IMC@i,w,c
   714  0070' 0D01               	mullw	1
   715  0072' 0E00'              	movlw	low Op_IMC@num
   716  0074' 24F3               	addwf	prodl,w,c
   717  0076' 6ED9               	movwf	fsr2l,c
   718  0078' 0E00'              	movlw	high Op_IMC@num
   719  007A' 20F4               	addwfc	prodh,w,c
   720  007C' 6EDA               	movwf	fsr2h,c
   721  007E' 50DF               	movf	indf2,w,c
   722  0080' EC00' F000'        	call	_putc_UART
   723  0084' 2A36'              	incf	Op_IMC@i,f,c
   724  0086' D7DA               	goto	l1060
   725  0088'                    l1076:
   726                           
   727                           ;Main.c: 32: }
   728                           ;Main.c: 35: dato[0]=(num[0] & 0x0F);
   729  0088' 501A'              	movf	Op_IMC@num,w,c
   730  008A' 0B0F               	andlw	15
   731  008C' 6E2B'              	movwf	Op_IMC@dato,c
   732                           
   733                           ;Main.c: 36: dato[1]=(num[1] & 0x0F);
   734  008E' 501B'              	movf	Op_IMC@num+1,w,c
   735  0090' 0B0F               	andlw	15
   736  0092' 6E2C'              	movwf	Op_IMC@dato+1,c
   737                           
   738                           ;Main.c: 37: dato[2]=(num[3] & 0x0F);
   739  0094' 501D'              	movf	Op_IMC@num+3,w,c
   740  0096' 0B0F               	andlw	15
   741  0098' 6E2D'              	movwf	Op_IMC@dato+2,c
   742                           
   743                           ;Main.c: 38: byte1 = dato[0]<<4 | dato[1];
   744  009A' 382B'              	swapf	Op_IMC@dato,w,c
   745  009C' 0BF0               	andlw	240
   746  009E' 102C'              	iorwf	Op_IMC@dato+1,w,c
   747  00A0' 6E35'              	movwf	Op_IMC@byte1,c
   748                           
   749                           ;Main.c: 39: dig1 = bcd2hex(byte1);
   750  00A2' 5035'              	movf	Op_IMC@byte1,w,c
   751  00A4' EC00' F000'        	call	_bcd2hex
   752  00A8' 6E32'              	movwf	Op_IMC@dig1,c
   753                           
   754                           ;Main.c: 41: dig1 = dig1 << 1;
   755  00AA' 5032'              	movf	Op_IMC@dig1,w,c
   756  00AC' 2432'              	addwf	Op_IMC@dig1,w,c
   757  00AE' 6E32'              	movwf	Op_IMC@dig1,c
   758                           
   759                           ;Main.c: 43: if(num[3]>=5){
   760  00B0' 0E04               	movlw	4
   761  00B2' 641D'              	cpfsgt	Op_IMC@num+3,c
   762  00B4' D002               	goto	l1086
   763                           
   764                           ;Main.c: 44: dec_pes = 0x01;
   765  00B6' 0E01               	movlw	1
   766  00B8' D001               	goto	L1
   767  00BA'                    l1086:
   768                           
   769                           ;Main.c: 46: else{
   770                           ;Main.c: 47: dec_pes = 0x00;
   771  00BA' 0E00               	movlw	0
   772  00BC'                    L1:
   773  00BC' 6E2A'              	movwf	Op_IMC@dec_pes,c
   774                           
   775                           ;Main.c: 48: }
   776                           ;Main.c: 50: dig1_pes = dig1 | dec_pes;
   777  00BE' 5032'              	movf	Op_IMC@dig1,w,c
   778  00C0' 102A'              	iorwf	Op_IMC@dec_pes,w,c
   779  00C2' 6E29'              	movwf	Op_IMC@dig1_pes,c
   780                           
   781                           ;Main.c: 55: dato[3] = (num[4] & 0x0F);
   782  00C4' 501E'              	movf	Op_IMC@num+4,w,c
   783  00C6' 0B0F               	andlw	15
   784  00C8' 6E2E'              	movwf	Op_IMC@dato+3,c
   785                           
   786                           ;Main.c: 56: dato[4] = (num[6] & 0x0F);
   787  00CA' 5020'              	movf	Op_IMC@num+6,w,c
   788  00CC' 0B0F               	andlw	15
   789  00CE' 6E2F'              	movwf	Op_IMC@dato+4,c
   790                           
   791                           ;Main.c: 57: dato[5] = (num[7] & 0x0F);
   792  00D0' 5021'              	movf	Op_IMC@num+7,w,c
   793  00D2' 0B0F               	andlw	15
   794  00D4' 6E30'              	movwf	Op_IMC@dato+5,c
   795                           
   796                           ;Main.c: 58: byte1 = dato[6]<<4 | dato[7];
   797  00D6' 3831'              	swapf	Op_IMC@dato+6,w,c
   798  00D8' 0BF0               	andlw	240
   799  00DA' 1032'              	iorwf	Op_IMC@dato+7,w,c
   800  00DC' 6E35'              	movwf	Op_IMC@byte1,c
   801                           
   802                           ;Main.c: 59: byte1= bcd2hex(byte1);
   803  00DE' 5035'              	movf	Op_IMC@byte1,w,c
   804  00E0' EC00' F000'        	call	_bcd2hex
   805  00E4' 6E35'              	movwf	Op_IMC@byte1,c
   806                           
   807                           ;Main.c: 61: dig2 = dato[3] << 6;
   808  00E6' 402E'              	rrncf	Op_IMC@dato+3,w,c
   809  00E8' 42E8               	rrncf	wreg,f,c
   810  00EA' 0BC0               	andlw	192
   811  00EC' 6E28'              	movwf	Op_IMC@dig2,c
   812                           
   813                           ;Main.c: 63: dec_alt_temp = (byte1*41);
   814  00EE' 5035'              	movf	Op_IMC@byte1,w,c
   815  00F0' 0D29               	mullw	41
   816  00F2' CFF3 F026'         	movff	prodl,Op_IMC@dec_alt_temp
   817  00F6' CFF4 F027'         	movff	prodh,Op_IMC@dec_alt_temp+1
   818                           
   819                           ;Main.c: 64: dec_alt = dec_alt_temp >> 6;
   820  00FA' C026' F015'        	movff	Op_IMC@dec_alt_temp,??_Op_IMC
   821  00FE' C027' F016'        	movff	Op_IMC@dec_alt_temp+1,??_Op_IMC+1
   822  0102' 0E06               	movlw	6
   823  0104' 6E00'              	movwf	(??_Op_IMC+2)& (0+255),c
   824  0106'                    u475:
   825  0106' 90D8               	bcf	status,0,c
   826  0108' 3216'              	rrcf	??_Op_IMC+1,f,c
   827  010A' 3215'              	rrcf	??_Op_IMC,f,c
   828  010C' 2E00'              	decfsz	(??_Op_IMC+2)& (0+255),f,c
   829  010E' D7FB               	goto	u475
   830  0110' 5015'              	movf	??_Op_IMC,w,c
   831  0112' 6E34'              	movwf	Op_IMC@dec_alt,c
   832                           
   833                           ;Main.c: 65: dec_alt = bcd2hex(dec_alt);
   834  0114' 5034'              	movf	Op_IMC@dec_alt,w,c
   835  0116' EC00' F000'        	call	_bcd2hex
   836  011A' 6E34'              	movwf	Op_IMC@dec_alt,c
   837                           
   838                           ;Main.c: 67: dig2_alt = dig2 | dec_alt;
   839  011C' 5028'              	movf	Op_IMC@dig2,w,c
   840  011E' 1034'              	iorwf	Op_IMC@dec_alt,w,c
   841  0120' 6E31'              	movwf	Op_IMC@dig2_alt,c
   842                           
   843                           ;Main.c: 70: unsigned int sq_alt2 = (dig2_alt * dig2_alt) >> 8;
   844  0122' 5031'              	movf	Op_IMC@dig2_alt,w,c
   845  0124' 0231'              	mulwf	Op_IMC@dig2_alt,c
   846  0126' CFF4 FFF3          	movff	prodh,prodl
   847  012A' 6AF4               	clrf	prodh,c
   848  012C' BEF3               	btfsc	prodl,7,c
   849  012E' 68F4               	setf	prodh,c
   850  0130' CFF3 F022'         	movff	prodl,Op_IMC@sq_alt2
   851  0134' CFF4 F023'         	movff	prodh,Op_IMC@sq_alt2+1
   852                           
   853                           ;Main.c: 73: unsigned int dig1_pes_rec = dig1_pes << 4;
   854  0138' 5029'              	movf	Op_IMC@dig1_pes,w,c
   855  013A' 6E00'              	movwf	??_Op_IMC& (0+255),c
   856  013C' 6A00'              	clrf	(??_Op_IMC+1)& (0+255),c
   857  013E' 3A15'              	swapf	??_Op_IMC,f,c
   858  0140' 3A16'              	swapf	??_Op_IMC+1,f,c
   859  0142' 0EF0               	movlw	240
   860  0144' 1616'              	andwf	??_Op_IMC+1,f,c
   861  0146' 5015'              	movf	??_Op_IMC,w,c
   862  0148' 0B0F               	andlw	15
   863  014A' 1216'              	iorwf	??_Op_IMC+1,f,c
   864  014C' 0EF0               	movlw	240
   865  014E' 1615'              	andwf	??_Op_IMC,f,c
   866  0150' C015' F024'        	movff	??_Op_IMC,Op_IMC@dig1_pes_rec
   867  0154' C016' F025'        	movff	??_Op_IMC+1,Op_IMC@dig1_pes_rec+1
   868                           
   869                           ;Main.c: 76: resultado = dig1_pes_rec/sq_alt2;
   870  0158' C024' F000'        	movff	Op_IMC@dig1_pes_rec,___lwdiv@dividend
   871  015C' C025' F001'        	movff	Op_IMC@dig1_pes_rec+1,___lwdiv@dividend+1
   872  0160' C022' F002'        	movff	Op_IMC@sq_alt2,___lwdiv@divisor
   873  0164' C023' F003'        	movff	Op_IMC@sq_alt2+1,___lwdiv@divisor+1
   874  0168' EC00' F000'        	call	___lwdiv	;wreg free
   875  016C' 5000'              	movf	?___lwdiv,w,c
   876  016E' 6E33'              	movwf	Op_IMC@resultado,c
   877                           
   878                           ;Main.c: 77: resultado = hex2bcd(resultado);
   879  0170' 5033'              	movf	Op_IMC@resultado,w,c
   880  0172' EC00' F000'        	call	_hex2bcd
   881  0176' 500E'              	movf	?_hex2bcd,w,c
   882  0178' 6E33'              	movwf	Op_IMC@resultado,c
   883                           
   884                           ;Main.c: 78: printf_UART ("\nResultado:\n\r");
   885  017A' 0E00'              	movlw	low STR_4
   886  017C' 6E01'              	movwf	printf_UART@dato,c
   887  017E' 0E00'              	movlw	high STR_4
   888  0180' 6E02'              	movwf	printf_UART@dato+1,c
   889  0182' EC00' F000'        	call	_printf_UART	;wreg free
   890                           
   891                           ;Main.c: 79: ASCII_UART(resultado);
   892  0186' C033' F000'        	movff	Op_IMC@resultado,?_ASCII_UART
   893  018A' 6A01'              	clrf	?_ASCII_UART+1,c
   894  018C' EC00' F000'        	call	_ASCII_UART	;wreg free
   895                           
   896                           ;Main.c: 80: printf_UART ("\n\n");
   897  0190' 0E00'              	movlw	low STR_5
   898  0192' 6E01'              	movwf	printf_UART@dato,c
   899  0194' 0E00'              	movlw	high STR_5
   900  0196' 6E02'              	movwf	printf_UART@dato+1,c
   901  0198' EC00' F000'        	call	_printf_UART	;wreg free
   902  019C' 0012               	return		;funcret
   903  019E'                    __end_of_Op_IMC:
   904                           	opt stack 0
   905                           tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           prodh	equ	0xFF4
   908                           prodl	equ	0xFF3
   909                           wreg	equ	0xFE8
   910                           indf2	equ	0xFDF
   911                           fsr2h	equ	0xFDA
   912                           fsr2l	equ	0xFD9
   913                           status	equ	0xFD8
   914                           
   915 ;; *************** function _scanf_UART *****************
   916 ;; Defined at:
   917 ;;		line 26 in file "UART.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      unsigned char 
   924 ;; Registers used:
   925 ;;		wreg, status,2
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   931 ;;      Params:         0       0       0       0       0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0       0       0       0       0
   933 ;;      Temps:          0       0       0       0       0       0       0       0       0
   934 ;;      Totals:         0       0       0       0       0       0       0       0       0
   935 ;;Total ram usage:        0 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; This function calls:
   938 ;;		Nothing
   939 ;; This function is called by:
   940 ;;		_Op_IMC
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944                           	psect	text3
   945  0000'                    __ptext3:
   946                           	opt stack 0
   947  0000'                    _scanf_UART:
   948                           	opt stack 29
   949  0000'                    l32:
   950  0000' AA9E               	btfss	3998,5,c	;volatile
   951  0002' D7FE               	goto	l32
   952                           
   953                           ;UART.c: 28: PIR1bits.RCIF=0;
   954  0004' 9A9E               	bcf	3998,5,c	;volatile
   955                           
   956                           ;UART.c: 29: return RCREG;
   957  0006' 50AE               	movf	4014,w,c	;volatile
   958  0008' 0012               	return	
   959  000A'                    __end_of_scanf_UART:
   960                           	opt stack 0
   961                           tblptru	equ	0xFF8
   962                           tblptrh	equ	0xFF7
   963                           prodh	equ	0xFF4
   964                           prodl	equ	0xFF3
   965                           wreg	equ	0xFE8
   966                           indf2	equ	0xFDF
   967                           fsr2h	equ	0xFDA
   968                           fsr2l	equ	0xFD9
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function _printf_UART *****************
   972 ;; Defined at:
   973 ;;		line 32 in file "UART.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  dato            2    1[COMRAM] PTR unsigned char 
   976 ;;		 -> STR_5(3), STR_4(14), STR_3(63), STR_2(59), 
   977 ;;		 -> STR_1(22), 
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  i               1    5[COMRAM] unsigned char 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   989 ;;      Params:         2       0       0       0       0       0       0       0       0
   990 ;;      Locals:         1       0       0       0       0       0       0       0       0
   991 ;;      Temps:          2       0       0       0       0       0       0       0       0
   992 ;;      Totals:         5       0       0       0       0       0       0       0       0
   993 ;;Total ram usage:        5 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    1
   996 ;; This function calls:
   997 ;;		_putc_UART
   998 ;; This function is called by:
   999 ;;		_Op_IMC
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text4
  1004  0000'                    __ptext4:
  1005                           	opt stack 0
  1006  0000'                    _printf_UART:
  1007                           	opt stack 28
  1008                           
  1009                           ;UART.c: 33: unsigned char i=0;
  1010                           
  1011                           ;incstack = 0
  1012  0000' 0E00               	movlw	0
  1013  0002' D013               	goto	L2
  1014  0004'                    l1020:
  1015                           
  1016                           ;UART.c: 35: putc_UART(dato[i]);
  1017  0004' 5005'              	movf	printf_UART@i,w,c
  1018  0006' 0D01               	mullw	1
  1019  0008' C001' F003'        	movff	printf_UART@dato,??_printf_UART
  1020  000C' C002' F004'        	movff	printf_UART@dato+1,??_printf_UART+1
  1021  0010' 50F3               	movf	prodl,w,c
  1022  0012' 2603'              	addwf	??_printf_UART,f,c
  1023  0014' 50F4               	movf	prodh,w,c
  1024  0016' 2204'              	addwfc	??_printf_UART+1,f,c
  1025  0018' C003' FFF6         	movff	??_printf_UART,tblptrl
  1026  001C' C004' FFF7         	movff	??_printf_UART+1,tblptrh
  1027  0020'                    	if	0	;tblptru may be non-zero
  1028  0020'                    	endif
  1029  0020'                    	if	0	;tblptru may be non-zero
  1030  0020'                    	endif
  1031  0020' 0008               	tblrd		*
  1032  0022' 50F5               	movf	tablat,w,c
  1033  0024' EC00' F000'        	call	_putc_UART
  1034                           
  1035                           ;UART.c: 36: i=i+1;
  1036  0028' 2805'              	incf	printf_UART@i,w,c
  1037  002A'                    L2:
  1038  002A' 6E05'              	movwf	printf_UART@i,c
  1039  002C' 5005'              	movf	printf_UART@i,w,c
  1040  002E' 0D01               	mullw	1
  1041  0030' C001' F003'        	movff	printf_UART@dato,??_printf_UART
  1042  0034' C002' F004'        	movff	printf_UART@dato+1,??_printf_UART+1
  1043  0038' 50F3               	movf	prodl,w,c
  1044  003A' 2603'              	addwf	??_printf_UART,f,c
  1045  003C' 50F4               	movf	prodh,w,c
  1046  003E' 2204'              	addwfc	??_printf_UART+1,f,c
  1047  0040' C003' FFF6         	movff	??_printf_UART,tblptrl
  1048  0044' C004' FFF7         	movff	??_printf_UART+1,tblptrh
  1049  0048'                    	if	0	;tblptru may be non-zero
  1050  0048'                    	endif
  1051  0048'                    	if	0	;tblptru may be non-zero
  1052  0048'                    	endif
  1053  0048' 0008               	tblrd		*
  1054  004A' 50F5               	movf	tablat,w,c
  1055  004C' 0900               	iorlw	0
  1056  004E' B4D8               	btfsc	status,2,c
  1057  0050' 0012               	return	
  1058  0052' D7D8               	goto	l1020
  1059  0054'                    __end_of_printf_UART:
  1060                           	opt stack 0
  1061                           tblptru	equ	0xFF8
  1062                           tblptrh	equ	0xFF7
  1063                           tblptrl	equ	0xFF6
  1064                           tablat	equ	0xFF5
  1065                           prodh	equ	0xFF4
  1066                           prodl	equ	0xFF3
  1067                           wreg	equ	0xFE8
  1068                           indf2	equ	0xFDF
  1069                           fsr2h	equ	0xFDA
  1070                           fsr2l	equ	0xFD9
  1071                           status	equ	0xFD8
  1072                           
  1073 ;; *************** function _putc_UART *****************
  1074 ;; Defined at:
  1075 ;;		line 21 in file "UART.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;  dato_TX         1    wreg     unsigned char 
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  dato_TX         1    0[COMRAM] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1089 ;;      Params:         0       0       0       0       0       0       0       0       0
  1090 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1092 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1093 ;;Total ram usage:        1 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_printf_UART
  1099 ;;		_Op_IMC
  1100 ;;		_BCD_UART
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text5
  1105  0000'                    __ptext5:
  1106                           	opt stack 0
  1107  0000'                    _putc_UART:
  1108                           	opt stack 29
  1109                           
  1110                           ;incstack = 0
  1111                           ;putc_UART@dato_TX stored from wreg
  1112  0000' 6E00'              	movwf	putc_UART@dato_TX,c
  1113  0002'                    l26:
  1114  0002' A2AC               	btfss	4012,1,c	;volatile
  1115  0004' D7FE               	goto	l26
  1116                           
  1117                           ;UART.c: 23: TXREG=dato_TX;
  1118  0006' C000' FFAD         	movff	putc_UART@dato_TX,4013	;volatile
  1119  000A' 0012               	return		;funcret
  1120  000C'                    __end_of_putc_UART:
  1121                           	opt stack 0
  1122                           tblptru	equ	0xFF8
  1123                           tblptrh	equ	0xFF7
  1124                           tblptrl	equ	0xFF6
  1125                           tablat	equ	0xFF5
  1126                           prodh	equ	0xFF4
  1127                           prodl	equ	0xFF3
  1128                           wreg	equ	0xFE8
  1129                           indf2	equ	0xFDF
  1130                           fsr2h	equ	0xFDA
  1131                           fsr2l	equ	0xFD9
  1132                           status	equ	0xFD8
  1133                           
  1134 ;; *************** function _hex2bcd *****************
  1135 ;; Defined at:
  1136 ;;		line 26 in file "comm.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  x               1    wreg     unsigned char 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  x               1   18[COMRAM] unsigned char 
  1141 ;;  y               2   19[COMRAM] unsigned int 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  2   14[COMRAM] unsigned int 
  1144 ;; Registers used:
  1145 ;;		wreg, status,2, status,0, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1151 ;;      Params:         2       0       0       0       0       0       0       0       0
  1152 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1153 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1154 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1155 ;;Total ram usage:        7 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    1
  1158 ;; This function calls:
  1159 ;;		___awdiv
  1160 ;;		___awmod
  1161 ;; This function is called by:
  1162 ;;		_Op_IMC
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text6
  1167  0000'                    __ptext6:
  1168                           	opt stack 0
  1169  0000'                    _hex2bcd:
  1170                           	opt stack 28
  1171                           
  1172                           ;incstack = 0
  1173                           ;hex2bcd@x stored from wreg
  1174  0000' 6E12'              	movwf	hex2bcd@x,c
  1175                           
  1176                           ;comm.c: 27: unsigned int y;
  1177                           ;comm.c: 29: y = (x / 100) << 8;
  1178  0002' C012' F006'        	movff	hex2bcd@x,___awdiv@dividend
  1179  0006' 6A07'              	clrf	___awdiv@dividend+1,c
  1180  0008' 0E00               	movlw	0
  1181  000A' 6E09'              	movwf	___awdiv@divisor+1,c
  1182  000C' 0E64               	movlw	100
  1183  000E' 6E08'              	movwf	___awdiv@divisor,c
  1184  0010' EC00' F000'        	call	___awdiv	;wreg free
  1185  0014' C006' F007'        	movff	?___awdiv,?___awdiv+1
  1186  0018' 6A06'              	clrf	?___awdiv,c
  1187  001A' C006' F013'        	movff	?___awdiv,hex2bcd@y
  1188  001E' C007' F014'        	movff	?___awdiv+1,hex2bcd@y+1
  1189                           
  1190                           ;comm.c: 30: y = ((x % 100)/10 << 4) | y;
  1191  0022' 0E00               	movlw	0
  1192  0024' 6E03'              	movwf	___awmod@divisor+1,c
  1193  0026' 0E64               	movlw	100
  1194  0028' 6E02'              	movwf	___awmod@divisor,c
  1195  002A' C012' F000'        	movff	hex2bcd@x,___awmod@dividend
  1196  002E' 6A01'              	clrf	___awmod@dividend+1,c
  1197  0030' EC00' F000'        	call	___awmod	;wreg free
  1198  0034' C000' F006'        	movff	?___awmod,___awdiv@dividend
  1199  0038' C001' F007'        	movff	?___awmod+1,___awdiv@dividend+1
  1200  003C' 0E00               	movlw	0
  1201  003E' 6E09'              	movwf	___awdiv@divisor+1,c
  1202  0040' 0E0A               	movlw	10
  1203  0042' 6E08'              	movwf	___awdiv@divisor,c
  1204  0044' EC00' F000'        	call	___awdiv	;wreg free
  1205  0048' 3A06'              	swapf	?___awdiv,f,c
  1206  004A' 3A07'              	swapf	?___awdiv+1,f,c
  1207  004C' 0EF0               	movlw	240
  1208  004E' 1607'              	andwf	?___awdiv+1,f,c
  1209  0050' 5006'              	movf	?___awdiv,w,c
  1210  0052' 0B0F               	andlw	15
  1211  0054' 1207'              	iorwf	?___awdiv+1,f,c
  1212  0056' 0EF0               	movlw	240
  1213  0058' 1606'              	andwf	?___awdiv,f,c
  1214  005A' 5013'              	movf	hex2bcd@y,w,c
  1215  005C' 1006'              	iorwf	?___awdiv,w,c
  1216  005E' 6E13'              	movwf	hex2bcd@y,c
  1217  0060' 5014'              	movf	hex2bcd@y+1,w,c
  1218  0062' 1007'              	iorwf	?___awdiv+1,w,c
  1219  0064' 6E14'              	movwf	hex2bcd@y+1,c
  1220                           
  1221                           ;comm.c: 31: y = ((x % 100) % 10) | y;
  1222  0066' 0E00               	movlw	0
  1223  0068' 6E03'              	movwf	___awmod@divisor+1,c
  1224  006A' 0E64               	movlw	100
  1225  006C' 6E02'              	movwf	___awmod@divisor,c
  1226  006E' C012' F000'        	movff	hex2bcd@x,___awmod@dividend
  1227  0072' 6A01'              	clrf	___awmod@dividend+1,c
  1228  0074' EC00' F000'        	call	___awmod	;wreg free
  1229  0078' C000' F010'        	movff	?___awmod,_hex2bcd$906
  1230  007C' C001' F011'        	movff	?___awmod+1,_hex2bcd$906+1
  1231                           
  1232                           ;comm.c: 31: y = ((x % 100) % 10) | y;
  1233  0080' C010' F000'        	movff	_hex2bcd$906,___awmod@dividend
  1234  0084' C011' F001'        	movff	_hex2bcd$906+1,___awmod@dividend+1
  1235  0088' 0E00               	movlw	0
  1236  008A' 6E03'              	movwf	___awmod@divisor+1,c
  1237  008C' 0E0A               	movlw	10
  1238  008E' 6E02'              	movwf	___awmod@divisor,c
  1239  0090' EC00' F000'        	call	___awmod	;wreg free
  1240  0094' 5013'              	movf	hex2bcd@y,w,c
  1241  0096' 1000'              	iorwf	?___awmod,w,c
  1242  0098' 6E13'              	movwf	hex2bcd@y,c
  1243  009A' 5014'              	movf	hex2bcd@y+1,w,c
  1244  009C' 1001'              	iorwf	?___awmod+1,w,c
  1245  009E' 6E14'              	movwf	hex2bcd@y+1,c
  1246                           
  1247                           ;comm.c: 33: return (y);
  1248  00A0' C013' F00E'        	movff	hex2bcd@y,?_hex2bcd
  1249  00A4' C014' F00F'        	movff	hex2bcd@y+1,?_hex2bcd+1
  1250  00A8' 0012               	return	
  1251  00AA'                    __end_of_hex2bcd:
  1252                           	opt stack 0
  1253                           tblptru	equ	0xFF8
  1254                           tblptrh	equ	0xFF7
  1255                           tblptrl	equ	0xFF6
  1256                           tablat	equ	0xFF5
  1257                           prodh	equ	0xFF4
  1258                           prodl	equ	0xFF3
  1259                           wreg	equ	0xFE8
  1260                           indf2	equ	0xFDF
  1261                           fsr2h	equ	0xFDA
  1262                           fsr2l	equ	0xFD9
  1263                           status	equ	0xFD8
  1264                           
  1265 ;; *************** function ___awmod *****************
  1266 ;; Defined at:
  1267 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;  dividend        2    0[COMRAM] int 
  1270 ;;  divisor         2    2[COMRAM] int 
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;  sign            1    5[COMRAM] unsigned char 
  1273 ;;  counter         1    4[COMRAM] unsigned char 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  2    0[COMRAM] int 
  1276 ;; Registers used:
  1277 ;;		wreg, status,2, status,0
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1283 ;;      Params:         4       0       0       0       0       0       0       0       0
  1284 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1286 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1287 ;;Total ram usage:        6 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_hex2bcd
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text7
  1297  0000'                    __ptext7:
  1298                           	opt stack 0
  1299  0000'                    ___awmod:
  1300                           	opt stack 28
  1301                           
  1302                           ;incstack = 0
  1303  0000' 0E00               	movlw	0
  1304  0002' 6E05'              	movwf	___awmod@sign,c
  1305  0004' AE01'              	btfss	___awmod@dividend+1,7,c
  1306  0006' D006               	goto	l990
  1307  0008' 6C00'              	negf	___awmod@dividend,c
  1308  000A' 1E01'              	comf	___awmod@dividend+1,f,c
  1309  000C' B0D8               	btfsc	status,0,c
  1310  000E' 2A01'              	incf	___awmod@dividend+1,f,c
  1311  0010' 0E01               	movlw	1
  1312  0012' 6E05'              	movwf	___awmod@sign,c
  1313  0014'                    l990:
  1314  0014' AE03'              	btfss	___awmod@divisor+1,7,c
  1315  0016' D004               	goto	l994
  1316  0018' 6C02'              	negf	___awmod@divisor,c
  1317  001A' 1E03'              	comf	___awmod@divisor+1,f,c
  1318  001C' B0D8               	btfsc	status,0,c
  1319  001E' 2A03'              	incf	___awmod@divisor+1,f,c
  1320  0020'                    l994:
  1321  0020' 5002'              	movf	___awmod@divisor,w,c
  1322  0022' 1003'              	iorwf	___awmod@divisor+1,w,c
  1323  0024' B4D8               	btfsc	status,2,c
  1324  0026' D018               	goto	l1010
  1325  0028' 0E01               	movlw	1
  1326  002A' 6E04'              	movwf	___awmod@counter,c
  1327  002C' D004               	goto	l1000
  1328  002E'                    l998:
  1329  002E' 90D8               	bcf	status,0,c
  1330  0030' 3602'              	rlcf	___awmod@divisor,f,c
  1331  0032' 3603'              	rlcf	___awmod@divisor+1,f,c
  1332  0034' 2A04'              	incf	___awmod@counter,f,c
  1333  0036'                    l1000:
  1334  0036' AE03'              	btfss	___awmod@divisor+1,7,c
  1335  0038' D7FA               	goto	l998
  1336  003A'                    l1002:
  1337  003A' 5002'              	movf	___awmod@divisor,w,c
  1338  003C' 5C00'              	subwf	___awmod@dividend,w,c
  1339  003E' 5003'              	movf	___awmod@divisor+1,w,c
  1340  0040' 5801'              	subwfb	___awmod@dividend+1,w,c
  1341  0042' A0D8               	btfss	status,0,c
  1342  0044' D004               	goto	l1006
  1343  0046' 5002'              	movf	___awmod@divisor,w,c
  1344  0048' 5E00'              	subwf	___awmod@dividend,f,c
  1345  004A' 5003'              	movf	___awmod@divisor+1,w,c
  1346  004C' 5A01'              	subwfb	___awmod@dividend+1,f,c
  1347  004E'                    l1006:
  1348  004E' 90D8               	bcf	status,0,c
  1349  0050' 3203'              	rrcf	___awmod@divisor+1,f,c
  1350  0052' 3202'              	rrcf	___awmod@divisor,f,c
  1351  0054' 2E04'              	decfsz	___awmod@counter,f,c
  1352  0056' D7F1               	goto	l1002
  1353  0058'                    l1010:
  1354  0058' 5005'              	movf	___awmod@sign,w,c
  1355  005A' B4D8               	btfsc	status,2,c
  1356  005C' D004               	goto	l1014
  1357  005E' 6C00'              	negf	___awmod@dividend,c
  1358  0060' 1E01'              	comf	___awmod@dividend+1,f,c
  1359  0062' B0D8               	btfsc	status,0,c
  1360  0064' 2A01'              	incf	___awmod@dividend+1,f,c
  1361  0066'                    l1014:
  1362  0066' C000' F000'        	movff	___awmod@dividend,?___awmod
  1363  006A' C001' F001'        	movff	___awmod@dividend+1,?___awmod+1
  1364  006E' 0012               	return	
  1365  0070'                    __end_of___awmod:
  1366                           	opt stack 0
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           prodh	equ	0xFF4
  1372                           prodl	equ	0xFF3
  1373                           wreg	equ	0xFE8
  1374                           indf2	equ	0xFDF
  1375                           fsr2h	equ	0xFDA
  1376                           fsr2l	equ	0xFD9
  1377                           status	equ	0xFD8
  1378                           
  1379 ;; *************** function ___awdiv *****************
  1380 ;; Defined at:
  1381 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  dividend        2    6[COMRAM] int 
  1384 ;;  divisor         2    8[COMRAM] int 
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;  quotient        2   12[COMRAM] int 
  1387 ;;  sign            1   11[COMRAM] unsigned char 
  1388 ;;  counter         1   10[COMRAM] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  2    6[COMRAM] int 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, status,0
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1398 ;;      Params:         4       0       0       0       0       0       0       0       0
  1399 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1401 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1402 ;;Total ram usage:        8 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; This function calls:
  1405 ;;		Nothing
  1406 ;; This function is called by:
  1407 ;;		_hex2bcd
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text8
  1412  0000'                    __ptext8:
  1413                           	opt stack 0
  1414  0000'                    ___awdiv:
  1415                           	opt stack 28
  1416                           
  1417                           ;incstack = 0
  1418  0000' 0E00               	movlw	0
  1419  0002' 6E0B'              	movwf	___awdiv@sign,c
  1420  0004' AE09'              	btfss	___awdiv@divisor+1,7,c
  1421  0006' D006               	goto	l946
  1422  0008' 6C08'              	negf	___awdiv@divisor,c
  1423  000A' 1E09'              	comf	___awdiv@divisor+1,f,c
  1424  000C' B0D8               	btfsc	status,0,c
  1425  000E' 2A09'              	incf	___awdiv@divisor+1,f,c
  1426  0010' 0E01               	movlw	1
  1427  0012' 6E0B'              	movwf	___awdiv@sign,c
  1428  0014'                    l946:
  1429  0014' AE07'              	btfss	___awdiv@dividend+1,7,c
  1430  0016' D006               	goto	l952
  1431  0018' 6C06'              	negf	___awdiv@dividend,c
  1432  001A' 1E07'              	comf	___awdiv@dividend+1,f,c
  1433  001C' B0D8               	btfsc	status,0,c
  1434  001E' 2A07'              	incf	___awdiv@dividend+1,f,c
  1435  0020' 0E01               	movlw	1
  1436  0022' 1A0B'              	xorwf	___awdiv@sign,f,c
  1437  0024'                    l952:
  1438  0024' 0E00               	movlw	0
  1439  0026' 6E0D'              	movwf	___awdiv@quotient+1,c
  1440  0028' 0E00               	movlw	0
  1441  002A' 6E0C'              	movwf	___awdiv@quotient,c
  1442  002C' 5008'              	movf	___awdiv@divisor,w,c
  1443  002E' 1009'              	iorwf	___awdiv@divisor+1,w,c
  1444  0030' B4D8               	btfsc	status,2,c
  1445  0032' D01C               	goto	l974
  1446  0034' 0E01               	movlw	1
  1447  0036' 6E0A'              	movwf	___awdiv@counter,c
  1448  0038' D004               	goto	l960
  1449  003A'                    l958:
  1450  003A' 90D8               	bcf	status,0,c
  1451  003C' 3608'              	rlcf	___awdiv@divisor,f,c
  1452  003E' 3609'              	rlcf	___awdiv@divisor+1,f,c
  1453  0040' 2A0A'              	incf	___awdiv@counter,f,c
  1454  0042'                    l960:
  1455  0042' AE09'              	btfss	___awdiv@divisor+1,7,c
  1456  0044' D7FA               	goto	l958
  1457  0046'                    l962:
  1458  0046' 90D8               	bcf	status,0,c
  1459  0048' 360C'              	rlcf	___awdiv@quotient,f,c
  1460  004A' 360D'              	rlcf	___awdiv@quotient+1,f,c
  1461  004C' 5008'              	movf	___awdiv@divisor,w,c
  1462  004E' 5C06'              	subwf	___awdiv@dividend,w,c
  1463  0050' 5009'              	movf	___awdiv@divisor+1,w,c
  1464  0052' 5807'              	subwfb	___awdiv@dividend+1,w,c
  1465  0054' A0D8               	btfss	status,0,c
  1466  0056' D005               	goto	l970
  1467  0058' 5008'              	movf	___awdiv@divisor,w,c
  1468  005A' 5E06'              	subwf	___awdiv@dividend,f,c
  1469  005C' 5009'              	movf	___awdiv@divisor+1,w,c
  1470  005E' 5A07'              	subwfb	___awdiv@dividend+1,f,c
  1471  0060' 800C'              	bsf	___awdiv@quotient,0,c
  1472  0062'                    l970:
  1473  0062' 90D8               	bcf	status,0,c
  1474  0064' 3209'              	rrcf	___awdiv@divisor+1,f,c
  1475  0066' 3208'              	rrcf	___awdiv@divisor,f,c
  1476  0068' 2E0A'              	decfsz	___awdiv@counter,f,c
  1477  006A' D7ED               	goto	l962
  1478  006C'                    l974:
  1479  006C' 500B'              	movf	___awdiv@sign,w,c
  1480  006E' B4D8               	btfsc	status,2,c
  1481  0070' D004               	goto	l978
  1482  0072' 6C0C'              	negf	___awdiv@quotient,c
  1483  0074' 1E0D'              	comf	___awdiv@quotient+1,f,c
  1484  0076' B0D8               	btfsc	status,0,c
  1485  0078' 2A0D'              	incf	___awdiv@quotient+1,f,c
  1486  007A'                    l978:
  1487  007A' C00C' F006'        	movff	___awdiv@quotient,?___awdiv
  1488  007E' C00D' F007'        	movff	___awdiv@quotient+1,?___awdiv+1
  1489  0082' 0012               	return	
  1490  0084'                    __end_of___awdiv:
  1491                           	opt stack 0
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           prodh	equ	0xFF4
  1497                           prodl	equ	0xFF3
  1498                           wreg	equ	0xFE8
  1499                           indf2	equ	0xFDF
  1500                           fsr2h	equ	0xFDA
  1501                           fsr2l	equ	0xFD9
  1502                           status	equ	0xFD8
  1503                           
  1504 ;; *************** function _bcd2hex *****************
  1505 ;; Defined at:
  1506 ;;		line 36 in file "comm.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  y               1    wreg     unsigned char 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  y               1    1[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      unsigned char 
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0, prodl, prodh
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1520 ;;      Params:         0       0       0       0       0       0       0       0       0
  1521 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1522 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1523 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1524 ;;Total ram usage:        2 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; This function calls:
  1527 ;;		Nothing
  1528 ;; This function is called by:
  1529 ;;		_Op_IMC
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text9
  1534  0000'                    __ptext9:
  1535                           	opt stack 0
  1536  0000'                    _bcd2hex:
  1537                           	opt stack 29
  1538                           
  1539                           ;incstack = 0
  1540                           ;bcd2hex@y stored from wreg
  1541  0000' 6E01'              	movwf	bcd2hex@y,c
  1542                           
  1543                           ;comm.c: 37: return ((y>>4)*10)+ (y & 0x0F);
  1544  0002' C001' F000'        	movff	bcd2hex@y,??_bcd2hex
  1545  0006' 0E0F               	movlw	15
  1546  0008' 1600'              	andwf	??_bcd2hex,f,c
  1547  000A' 3801'              	swapf	bcd2hex@y,w,c
  1548  000C' 0B0F               	andlw	15
  1549  000E' 0D0A               	mullw	10
  1550  0010' 50F3               	movf	prodl,w,c
  1551  0012' 2400'              	addwf	??_bcd2hex,w,c
  1552  0014' 0012               	return	
  1553  0016'                    __end_of_bcd2hex:
  1554                           	opt stack 0
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           prodh	equ	0xFF4
  1560                           prodl	equ	0xFF3
  1561                           wreg	equ	0xFE8
  1562                           indf2	equ	0xFDF
  1563                           fsr2h	equ	0xFDA
  1564                           fsr2l	equ	0xFD9
  1565                           status	equ	0xFD8
  1566                           
  1567 ;; *************** function ___lwdiv *****************
  1568 ;; Defined at:
  1569 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;  dividend        2    0[COMRAM] unsigned int 
  1572 ;;  divisor         2    2[COMRAM] unsigned int 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  quotient        2    4[COMRAM] unsigned int 
  1575 ;;  counter         1    6[COMRAM] unsigned char 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  2    0[COMRAM] unsigned int 
  1578 ;; Registers used:
  1579 ;;		wreg, status,2, status,0
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1585 ;;      Params:         4       0       0       0       0       0       0       0       0
  1586 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1588 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1589 ;;Total ram usage:        7 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; This function calls:
  1592 ;;		Nothing
  1593 ;; This function is called by:
  1594 ;;		_Op_IMC
  1595 ;; This function uses a non-reentrant model
  1596 ;;
  1597                           
  1598                           	psect	text10
  1599  0000'                    __ptext10:
  1600                           	opt stack 0
  1601  0000'                    ___lwdiv:
  1602                           	opt stack 29
  1603                           
  1604                           ;incstack = 0
  1605  0000' 0E00               	movlw	0
  1606  0002' 6E05'              	movwf	___lwdiv@quotient+1,c
  1607  0004' 0E00               	movlw	0
  1608  0006' 6E04'              	movwf	___lwdiv@quotient,c
  1609  0008' 5002'              	movf	___lwdiv@divisor,w,c
  1610  000A' 1003'              	iorwf	___lwdiv@divisor+1,w,c
  1611  000C' B4D8               	btfsc	status,2,c
  1612  000E' D01C               	goto	l501
  1613  0010' 0E01               	movlw	1
  1614  0012' 6E06'              	movwf	___lwdiv@counter,c
  1615  0014' D004               	goto	l1040
  1616  0016'                    l1038:
  1617  0016' 90D8               	bcf	status,0,c
  1618  0018' 3602'              	rlcf	___lwdiv@divisor,f,c
  1619  001A' 3603'              	rlcf	___lwdiv@divisor+1,f,c
  1620  001C' 2A06'              	incf	___lwdiv@counter,f,c
  1621  001E'                    l1040:
  1622  001E' AE03'              	btfss	___lwdiv@divisor+1,7,c
  1623  0020' D7FA               	goto	l1038
  1624  0022'                    l1042:
  1625  0022' 90D8               	bcf	status,0,c
  1626  0024' 3604'              	rlcf	___lwdiv@quotient,f,c
  1627  0026' 3605'              	rlcf	___lwdiv@quotient+1,f,c
  1628  0028' 5002'              	movf	___lwdiv@divisor,w,c
  1629  002A' 5C00'              	subwf	___lwdiv@dividend,w,c
  1630  002C' 5003'              	movf	___lwdiv@divisor+1,w,c
  1631  002E' 5801'              	subwfb	___lwdiv@dividend+1,w,c
  1632  0030' A0D8               	btfss	status,0,c
  1633  0032' D005               	goto	l1050
  1634  0034' 5002'              	movf	___lwdiv@divisor,w,c
  1635  0036' 5E00'              	subwf	___lwdiv@dividend,f,c
  1636  0038' 5003'              	movf	___lwdiv@divisor+1,w,c
  1637  003A' 5A01'              	subwfb	___lwdiv@dividend+1,f,c
  1638  003C' 8004'              	bsf	___lwdiv@quotient,0,c
  1639  003E'                    l1050:
  1640  003E' 90D8               	bcf	status,0,c
  1641  0040' 3203'              	rrcf	___lwdiv@divisor+1,f,c
  1642  0042' 3202'              	rrcf	___lwdiv@divisor,f,c
  1643  0044' 2E06'              	decfsz	___lwdiv@counter,f,c
  1644  0046' D7ED               	goto	l1042
  1645  0048'                    l501:
  1646  0048' C004' F000'        	movff	___lwdiv@quotient,?___lwdiv
  1647  004C' C005' F001'        	movff	___lwdiv@quotient+1,?___lwdiv+1
  1648  0050' 0012               	return		;funcret
  1649  0052'                    __end_of___lwdiv:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           prodh	equ	0xFF4
  1656                           prodl	equ	0xFF3
  1657                           wreg	equ	0xFE8
  1658                           indf2	equ	0xFDF
  1659                           fsr2h	equ	0xFDA
  1660                           fsr2l	equ	0xFD9
  1661                           status	equ	0xFD8
  1662                           tblptru	equ	0xFF8
  1663                           tblptrh	equ	0xFF7
  1664                           tblptrl	equ	0xFF6
  1665                           tablat	equ	0xFF5
  1666                           prodh	equ	0xFF4
  1667                           prodl	equ	0xFF3
  1668                           wreg	equ	0xFE8
  1669                           indf2	equ	0xFDF
  1670                           fsr2h	equ	0xFDA
  1671                           fsr2l	equ	0xFD9
  1672                           status	equ	0xFD8
  1673                           
  1674                           	psect	rparam
  1675  0000                     tblptru	equ	0xFF8
  1676                           tblptrh	equ	0xFF7
  1677                           tblptrl	equ	0xFF6
  1678                           tablat	equ	0xFF5
  1679                           prodh	equ	0xFF4
  1680                           prodl	equ	0xFF3
  1681                           wreg	equ	0xFE8
  1682                           indf2	equ	0xFDF
  1683                           fsr2h	equ	0xFDA
  1684                           fsr2l	equ	0xFD9
  1685                           status	equ	0xFD8


Data Sizes:
    Strings     161
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     55      55
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf_UART@dato	PTR unsigned char  size(2) Largest target is 63
		 -> STR_5(CODE[3]), STR_4(CODE[14]), STR_3(CODE[63]), STR_2(CODE[59]), 
		 -> STR_1(CODE[22]), 


Critical Paths under _main in COMRAM

    _main->_Op_IMC
    _Op_IMC->_hex2bcd
    _printf_UART->_putc_UART
    _hex2bcd->___awdiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3331
                             _Op_IMC
                             _config
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Op_IMC                                              34    34      0    3331
                                             21 COMRAM    34    34      0
                         _ASCII_UART
                            ___lwdiv
                            _bcd2hex
                            _hex2bcd
                        _printf_UART
                          _putc_UART
                         _scanf_UART
 ---------------------------------------------------------------------------------
 (2) _scanf_UART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _printf_UART                                          5     3      2     507
                                              1 COMRAM     5     3      2
                          _putc_UART
 ---------------------------------------------------------------------------------
 (2) _putc_UART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _hex2bcd                                              7     5      2    1514
                                             14 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     604
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _bcd2hex                                              2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ASCII_UART                                           2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Op_IMC
     _ASCII_UART
     ___lwdiv
     _bcd2hex
     _hex2bcd
       ___awdiv
         ___awmod (ARG)
       ___awmod
     _printf_UART
       _putc_UART
     _putc_UART
     _scanf_UART
   _config

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     37      37       1       57.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Mar 06 18:18:09 2018

             Op_IMC@dato 00002B              Op_IMC@byte1 000035                       l32 000000  
                     l26 000002             ___awdiv@sign 00000B              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000            Op_IMC@dec_alt 000034            Op_IMC@dec_pes 00002A  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             Op_IMC@sq_alt 000018                      l501 000048  
                    l960 000042                      l952 000024                      l970 000062  
                    l962 000046                      l946 000014                      l958 00003A  
                    l974 00006C                      l990 000014                      l978 00007A  
                    l994 000020                      l998 00002E             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      u475 000106           Op_IMC@dig2_alt 000031  
         Op_IMC@dig1_pes 000029             ___awmod@sign 000005                      prod 000FF3  
                    wreg 000FE8            Op_IMC@sq_alt2 000022             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1000 000036                     l1002 00003A  
                   l1010 000058                     l1020 000004                     l1014 000066  
                   l1006 00004E                     l1040 00001E                     l1050 00003E  
                   l1042 000022                     l1060 00003C                     l1038 000016  
                   l1126 000004                     l1064 000044                     l1068 000058  
                   l1076 000088                     l1086 0000BA             printf_UART@i 000005  
                   STR_1 00007B                     STR_2 000040                     STR_3 000001  
                   STR_4 000091                     STR_5 00009F                     _TMR0 000FD6  
           __CFG_WRTB$ON 000000                     _main 000000                     indf2 000FDF  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 000000*           __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000            __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000  
        __end_of_bcd2hex 000016                    ?_main 000000          __end_of___awdiv 000084  
        __end_of___awmod 000070                    _T0CON 000FD5          ___awdiv@divisor 000008  
        __end_of___lwdiv 000052          ___awdiv@counter 00000A                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF            __CFG_USBDIV$2 000000  
                  _TXREG 000FAD                    _TXSTA 000FAC            __CFG_PWRT$OFF 000000  
        __end_of_hex2bcd 0000AA            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000          __initialization 000000             __end_of_main 00000A  
                 ??_main 000037          Op_IMC@resultado 000033            __activetblptr 000001  
       ___awdiv@dividend 000006                   _SPBRGH 000FB0           __CFG_VREGEN$ON 000000  
                 _Op_IMC 000000           __CFG_XINST$OFF 000000                ??_bcd2hex 000000  
              ??___awdiv 00000A           __CFG_STVREN$ON 000000                ??___awmod 000004  
              ??___lwdiv 000004                   _config 000000             ??_ASCII_UART 000000  
       ___awdiv@quotient 00000C                ??_hex2bcd 000010          ___awmod@divisor 000002  
        ___awmod@counter 000004             __mediumconst 000000*                  tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8             ?_printf_UART 000001  
             __accesstop 000000* __end_of__initialization 000000          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 000000                  ?_Op_IMC 000000  
        printf_UART@dato 000001                  ?_config 000000                  _BAUDCON 000FB8  
       putc_UART@dato_TX 000000       __size_of_putc_UART 000000                  Op_IMC@i 000036  
                __Hparam 000000          __size_of_Op_IMC 000000                  __Lparam 000000  
                _bcd2hex 000000                  ___awdiv 000000                  ___awmod 000000  
                ___lwdiv 000000             __psmallconst 000000          __size_of_config 000000  
     Op_IMC@dig1_pes_rec 000024                  __pcinit 000000                  _hex2bcd 000000  
                __ramtop 000000*                 __ptext0 000000                  __ptext1 000000  
                __ptext2 000000                  __ptext3 000000                  __ptext4 000000  
                __ptext5 000000                  __ptext6 000000                  __ptext7 000000  
                __ptext8 000000                  __ptext9 000000               _scanf_UART 000000  
       ___awmod@dividend 000000     end_of_initialization 000000     __size_of_printf_UART 000000  
      __end_of_putc_UART 00000C                _TRISCbits 000F94                Op_IMC@num 00001A  
     Op_IMC@dec_alt_temp 000026                _TXSTAbits 000FAC           __end_of_Op_IMC 00019E  
         __end_of_config 00001A              ?_scanf_UART 000000      start_initialization 000000  
               ??_Op_IMC 000015                 ??_config 000000         __CFG_LPT1OSC$OFF 000000  
            _hex2bcd$906 000010      __size_of_scanf_UART 000000         ___lwdiv@dividend 000000  
               ?_bcd2hex 000000                 ?___awdiv 000006                 ?___awmod 000000  
               ?___lwdiv 000000                 ?_hex2bcd 00000E              __smallconst 000000* 
       ___lwdiv@quotient 000004                 _PIR1bits 000F9E         __CFG_WDTPS$32768 000000  
              _putc_UART 000000               _ADCON0bits 000FC2            ??_printf_UART 000003  
               __Hrparam 000000*                __Lrparam 000000*            __Lsmallconst 000000* 
       __size_of_bcd2hex 000000                 bcd2hex@y 000001         __size_of___awdiv 000000  
       __size_of___awmod 000000               ?_putc_UART 000000               _ASCII_UART 000000* 
       __size_of___lwdiv 000000         __size_of_hex2bcd 000000             ??_scanf_UART 000000  
        ___lwdiv@divisor 000002          ___lwdiv@counter 000006                 __ptext10 000000  
          __size_of_main 000000                 hex2bcd@x 000012                 hex2bcd@y 000013  
    __end_of_printf_UART 000054       __end_of_scanf_UART 00000A    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2              ?_ASCII_UART 000000              ??_putc_UART 000000  
            _printf_UART 000000       __CFG_FOSC$HSPLL_HS 000000               Op_IMC@dig1 000032  
             Op_IMC@dig2 000028  
